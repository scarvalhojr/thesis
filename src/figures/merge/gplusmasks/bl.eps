%!PS-Adobe-2.0 EPSF-2.0
%%Title: bl.eps
%%Creator: gnuplot 4.0 patchlevel 0
%%CreationDate: Fri Feb 16 20:06:49 2007
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 489 276
%%Orientation: Portrait
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color false def
/Solid false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -60 def
/dl {10.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTw { PL [] 1 setgray } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {show} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} bind def
/MFwidth {0 exch {dup 3 get{dup dup 0 get findfont exch 1 get scalefont
     setfont 6 get stringwidth pop add} {pop} ifelse} forall} bind def
/MLshow { currentpoint stroke M
  0 exch R MFshow } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R MFshow } def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R MFshow } def
end
%%EndProlog
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Times) findfont 180 scalefont setfont
1.000 UL
LTb
1026 540 M
63 0 V
stroke
918 540 M
gsave 0 setgray
[ [(Times) 180.0 0.0 true true 0 ( 0)]
] -60.0 MRshow
grestore
1.000 UL
LTb
1026 666 M
31 0 V
-31 126 R
31 0 V
-31 126 R
31 0 V
-31 126 R
31 0 V
-31 126 R
63 0 V
stroke
918 1170 M
gsave 0 setgray
[ [(Times) 180.0 0.0 true true 0 ( 0.05)]
] -60.0 MRshow
grestore
1.000 UL
LTb
1026 1296 M
31 0 V
-31 126 R
31 0 V
-31 126 R
31 0 V
-31 126 R
31 0 V
-31 126 R
63 0 V
stroke
918 1800 M
gsave 0 setgray
[ [(Times) 180.0 0.0 true true 0 ( 0.1)]
] -60.0 MRshow
grestore
1.000 UL
LTb
1026 1926 M
31 0 V
-31 126 R
31 0 V
-31 126 R
31 0 V
-31 126 R
31 0 V
-31 126 R
63 0 V
stroke
918 2430 M
gsave 0 setgray
[ [(Times) 180.0 0.0 true true 0 ( 0.15)]
] -60.0 MRshow
grestore
1.000 UL
LTb
1026 2556 M
31 0 V
-31 126 R
31 0 V
-31 126 R
31 0 V
-31 126 R
31 0 V
-31 126 R
63 0 V
stroke
918 3060 M
gsave 0 setgray
[ [(Times) 180.0 0.0 true true 0 ( 0.2)]
] -60.0 MRshow
grestore
1.000 UL
LTb
1026 3186 M
31 0 V
-31 126 R
31 0 V
-31 126 R
31 0 V
-31 126 R
31 0 V
-31 126 R
63 0 V
stroke
918 3690 M
gsave 0 setgray
[ [(Times) 180.0 0.0 true true 0 ( 0.25)]
] -60.0 MRshow
grestore
1.000 UL
LTb
1026 3816 M
31 0 V
-31 126 R
31 0 V
-31 126 R
31 0 V
-31 126 R
31 0 V
-31 126 R
63 0 V
stroke
918 4320 M
gsave 0 setgray
[ [(Times) 180.0 0.0 true true 0 ( 0.3)]
] -60.0 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
1026 540 M
0 3780 V
1.000 UL
LTb
1026 540 M
0 63 V
stroke
1026 360 M
gsave 0 setgray
[ [(Times) 180.0 0.0 true true 0 ( 0)]
] -60.0 MCshow
grestore
1.000 UL
LTb
1125 540 M
0 31 V
100 -31 R
0 31 V
99 -31 R
0 31 V
99 -31 R
0 31 V
1.000 UL
LTa
1523 540 M
0 3780 V
1.000 UL
LTb
1523 540 M
0 63 V
stroke
1523 360 M
gsave 0 setgray
[ [(Times) 180.0 0.0 true true 0 ( 5)]
] -60.0 MCshow
grestore
1.000 UL
LTb
1622 540 M
0 31 V
100 -31 R
0 31 V
99 -31 R
0 31 V
99 -31 R
0 31 V
1.000 UL
LTa
2020 540 M
0 3780 V
1.000 UL
LTb
2020 540 M
0 63 V
stroke
2020 360 M
gsave 0 setgray
[ [(Times) 180.0 0.0 true true 0 ( 10)]
] -60.0 MCshow
grestore
1.000 UL
LTb
2119 540 M
0 31 V
99 -31 R
0 31 V
100 -31 R
0 31 V
99 -31 R
0 31 V
1.000 UL
LTa
2516 540 M
0 3780 V
1.000 UL
LTb
2516 540 M
0 63 V
stroke
2516 360 M
gsave 0 setgray
[ [(Times) 180.0 0.0 true true 0 ( 15)]
] -60.0 MCshow
grestore
1.000 UL
LTb
2616 540 M
0 31 V
99 -31 R
0 31 V
99 -31 R
0 31 V
100 -31 R
0 31 V
1.000 UL
LTa
3013 540 M
0 3780 V
1.000 UL
LTb
3013 540 M
0 63 V
stroke
3013 360 M
gsave 0 setgray
[ [(Times) 180.0 0.0 true true 0 ( 20)]
] -60.0 MCshow
grestore
1.000 UL
LTb
3113 540 M
0 31 V
99 -31 R
0 31 V
99 -31 R
0 31 V
100 -31 R
0 31 V
1.000 UL
LTa
3510 540 M
0 3780 V
1.000 UL
LTb
3510 540 M
0 63 V
stroke
3510 360 M
gsave 0 setgray
[ [(Times) 180.0 0.0 true true 0 ( 25)]
] -60.0 MCshow
grestore
1.000 UL
LTb
3609 540 M
0 31 V
100 -31 R
0 31 V
99 -31 R
0 31 V
99 -31 R
0 31 V
1.000 UL
LTa
4007 540 M
0 3780 V
1.000 UL
LTb
4007 540 M
0 63 V
stroke
4007 360 M
gsave 0 setgray
[ [(Times) 180.0 0.0 true true 0 ( 30)]
] -60.0 MCshow
grestore
1.000 UL
LTb
4106 540 M
0 31 V
100 -31 R
0 31 V
99 -31 R
0 31 V
99 -31 R
0 31 V
1.000 UL
LTa
4504 540 M
0 3780 V
1.000 UL
LTb
4504 540 M
0 63 V
stroke
4504 360 M
gsave 0 setgray
[ [(Times) 180.0 0.0 true true 0 ( 35)]
] -60.0 MCshow
grestore
1.000 UL
LTb
4603 540 M
0 31 V
99 -31 R
0 31 V
100 -31 R
0 31 V
99 -31 R
0 31 V
1.000 UL
LTa
5000 540 M
0 3780 V
1.000 UL
LTb
5000 540 M
0 63 V
stroke
5000 360 M
gsave 0 setgray
[ [(Times) 180.0 0.0 true true 0 ( 40)]
] -60.0 MCshow
grestore
1.000 UL
LTb
5100 540 M
0 31 V
99 -31 R
0 31 V
99 -31 R
0 31 V
100 -31 R
0 31 V
1.000 UL
LTa
5497 540 M
0 3780 V
1.000 UL
LTb
5497 540 M
0 63 V
stroke
5497 360 M
gsave 0 setgray
[ [(Times) 180.0 0.0 true true 0 ( 45)]
] -60.0 MCshow
grestore
1.000 UL
LTb
5597 540 M
0 31 V
99 -31 R
0 31 V
99 -31 R
0 31 V
100 -31 R
0 31 V
1.000 UL
LTa
5994 540 M
0 3780 V
1.000 UL
LTb
5994 540 M
0 63 V
stroke
5994 360 M
gsave 0 setgray
[ [(Times) 180.0 0.0 true true 0 ( 50)]
] -60.0 MCshow
grestore
1.000 UL
LTb
6093 540 M
0 31 V
100 -31 R
0 31 V
99 -31 R
0 31 V
99 -31 R
0 31 V
1.000 UL
LTa
6491 540 M
0 3780 V
1.000 UL
LTb
6491 540 M
0 63 V
stroke
6491 360 M
gsave 0 setgray
[ [(Times) 180.0 0.0 true true 0 ( 55)]
] -60.0 MCshow
grestore
1.000 UL
LTb
6590 540 M
0 31 V
100 -31 R
0 31 V
99 -31 R
0 31 V
99 -31 R
0 31 V
1.000 UL
LTa
6988 540 M
0 3780 V
1.000 UL
LTb
6988 540 M
0 63 V
stroke
6988 360 M
gsave 0 setgray
[ [(Times) 180.0 0.0 true true 0 ( 60)]
] -60.0 MCshow
grestore
1.000 UL
LTb
7087 540 M
0 31 V
99 -31 R
0 31 V
100 -31 R
0 31 V
99 -31 R
0 31 V
1.000 UL
LTa
7484 540 M
0 3780 V
1.000 UL
LTb
7484 540 M
0 63 V
stroke
7484 360 M
gsave 0 setgray
[ [(Times) 180.0 0.0 true true 0 ( 65)]
] -60.0 MCshow
grestore
1.000 UL
LTb
7584 540 M
0 31 V
99 -31 R
0 31 V
99 -31 R
0 31 V
100 -31 R
0 31 V
1.000 UL
LTa
7981 540 M
0 3780 V
1.000 UL
LTb
7981 540 M
0 63 V
stroke
7981 360 M
gsave 0 setgray
[ [(Times) 180.0 0.0 true true 0 ( 70)]
] -60.0 MCshow
grestore
1.000 UL
LTb
8081 540 M
0 31 V
99 -31 R
0 31 V
99 -31 R
0 31 V
100 -31 R
0 31 V
1.000 UL
LTb
1026 540 M
7452 0 V
0 3780 V
-7452 0 V
0 -3780 V
LTb
180 2430 M
gsave 0 setgray
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Times) 180.0 0.0 true true 0 (Normalized border length)]
] -60.0 MCshow
grestore
grestore
LTb
4752 90 M
gsave 0 setgray
[ [(Times) 180.0 0.0 true true 0 (Masking step)]
] -60.0 MCshow
grestore
1.000 UP
1.000 UP
1.000 UL
LT0
1125 1160 Crs
1225 1811 Crs
1324 2597 Crs
1423 2280 Crs
1523 3104 Crs
1622 3674 Crs
1722 3900 Crs
1821 3868 Crs
1920 3969 Crs
2020 4004 Crs
2119 4012 Crs
2218 4000 Crs
2318 4028 Crs
2417 4012 Crs
2516 4038 Crs
2616 4021 Crs
2715 4044 Crs
2814 4025 Crs
2914 4030 Crs
3013 4040 Crs
3113 4018 Crs
3212 4011 Crs
3311 4022 Crs
3411 4042 Crs
3510 4053 Crs
3609 4027 Crs
3709 4022 Crs
3808 4027 Crs
3907 4015 Crs
4007 4009 Crs
4106 4021 Crs
4206 4034 Crs
4305 4015 Crs
4404 4023 Crs
4504 4029 Crs
4603 4034 Crs
4702 4025 Crs
4802 4040 Crs
4901 4051 Crs
5000 4027 Crs
5100 4024 Crs
5199 4030 Crs
5298 4022 Crs
5398 4033 Crs
5497 4033 Crs
5597 4025 Crs
5696 3999 Crs
5795 4044 Crs
5895 4019 Crs
5994 4030 Crs
6093 4036 Crs
6193 4044 Crs
6292 4041 Crs
6391 4032 Crs
6491 4021 Crs
6590 3973 Crs
6690 3961 Crs
6789 3897 Crs
6888 3795 Crs
6988 3686 Crs
7087 3540 Crs
7186 3331 Crs
7286 3101 Crs
7385 2863 Crs
7484 2595 Crs
7584 2307 Crs
7683 1997 Crs
7782 1743 Crs
7882 1483 Crs
7981 1269 Crs
8081 1069 Crs
8180 895 Crs
8279 788 Crs
8379 699 Crs
1.000 UP
1.000 UL
LT1
1125 629 Box
1225 712 Box
1324 861 Box
1423 833 Box
1523 1177 Box
1622 1678 Box
1722 2135 Box
1821 2046 Box
1920 2708 Box
2020 3305 Box
2119 3556 Box
2218 3496 Box
2318 3667 Box
2417 3801 Box
2516 3822 Box
2616 3805 Box
2715 3812 Box
2814 3785 Box
2914 3795 Box
3013 3783 Box
3113 3742 Box
3212 3756 Box
3311 3728 Box
3411 3737 Box
3510 3753 Box
3609 3760 Box
3709 3753 Box
3808 3727 Box
3907 3752 Box
4007 3750 Box
4106 3747 Box
4206 3731 Box
4305 3709 Box
4404 3713 Box
4504 3745 Box
4603 3718 Box
4702 3727 Box
4802 3733 Box
4901 3720 Box
5000 3731 Box
5100 3728 Box
5199 3745 Box
5298 3752 Box
5398 3716 Box
5497 3742 Box
5597 3719 Box
5696 3707 Box
5795 3764 Box
5895 3728 Box
5994 3738 Box
6093 3744 Box
6193 3720 Box
6292 3707 Box
6391 3728 Box
6491 3729 Box
6590 3722 Box
6690 3732 Box
6789 3723 Box
6888 3733 Box
6988 3717 Box
7087 3729 Box
7186 3712 Box
7286 3717 Box
7385 3731 Box
7484 3730 Box
7584 3715 Box
7683 3755 Box
7782 3781 Box
7882 3741 Box
7981 3607 Box
8081 3905 Box
8180 3573 Box
8279 3209 Box
8379 2833 Box
1.000 UL
LTb
1026 540 M
7452 0 V
0 3780 V
-7452 0 V
0 -3780 V
1.000 UP
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Times
